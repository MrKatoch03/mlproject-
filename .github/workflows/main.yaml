name: Deploy to EC2 via ECR + SSM

on:
  push:
    branches: [self-hosted, linux, ec2-runner]

env:
  IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: [self-hosted, linux, ec2-runner] #Updates

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
        | docker login --username AWS --password-stdin ${{ secrets.ECR_LOGIN_URI }}

    - name: Build and push Docker image to Amazon ECR
      run: |
        IMAGE_URI=${{ secrets.ECR_LOGIN_URI }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}
        echo "Building image: $IMAGE_URI"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Trigger deployment on EC2 via SSM
      run: |
        aws ssm send-command \
          --targets "Key=instanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy new Docker image" \
          --parameters 'commands=[
            "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_LOGIN_URI }}",
            "docker pull ${{ secrets.ECR_LOGIN_URI }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}",
            "docker stop my-app || true",
            "docker rm my-app || true",
            "docker run -d --name my-app -p 80:80 ${{ secrets.ECR_LOGIN_URI }}/${{ secrets.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}"
          ]'
